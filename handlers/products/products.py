from pprint import pprint

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.callback_data import CallbackData
from fuzzywuzzy import fuzz

from handlers.states import States
from loader import dp

message_list_id = 1
message_decor_id = 1
food = {}

sort_list = [
    "–º–æ—Ä—Å–∫–∞—è –∫–∞–ø—É—Å—Ç–∞",
    "–º–∞–π–æ–Ω–µ–∑",
    "—Å–µ–ª–µ–¥–∫–∞",
    "—Å–µ–ª—å–¥",
    "–∫—Ä–∞–±",
    "–∫—É—Ä–≥—Ä—É–¥–∫–∞",
    "–∫—É—Ä–∏–Ω–∞ –≥—Ä—É–¥–∫–∞",
    "–∫—É—Ä.–≥—Ä—É–¥–∫–∞",
    "—è–π—Ü–∞",
    "–∫–æ–ª–±–∞—Å–∫–∏",
    "–∫–æ–ª–±.–≤–∞—Ä"
    "–∫–æ–ª–±–∞—Å–∞ –≤–∞—Ä",
    "—Å–∞—Ä–¥–µ–ª—å–∫–∏",
    "–∫–æ–ª–±–∞—Å—É –≤–∞—Ä",
    "—Å–æ—Å–∏—Å–∫–∏",
    "–∫–æ–ª–±–∞—Å–∞ –¥–ª—è –ø–∏—Ü—Ü—ã",
    "–∫–æ–ª–±–∞—Å–∞",
    "–≤–µ—Ç—á–∏–Ω–∞",
    "–¥—Ä–æ–∂–∂–∏",
    "–∫–æ–Ω—Å–µ—Ä–≤–∞",
    "–∫–æ—Ä–∏—Ü–∞",
    "–ø–µ—Ä–µ—Ü",
    "–≤–∞–Ω–∏–ª–∏–Ω",
    "–≤–∞–Ω–∏–ª—å–Ω—ã–π —Å–∞—Ö–∞—Ä",
    "–ø—Ä–∏–ø—Ä–∞–≤–∞",
    "—Å—Ç—Ä—É–∂–∫–∞",
    "–ø–∞–ø—Ä–∏–∫–∞",
    "–≤–∞—Ñ–ª–∏",
    "–≥—Ä–µ—á–∫–∞",
    "—Ä–∏—Å",
    "–º–∞–∫–∞—Ä–æ–Ω—ã",
    "—Å–ø–∞–≥–µ—Ç—Ç–∏",
    "—Å–∞—Ö–∞—Ä",
    "—Å–æ–ª—å",
    "–º—É–∫–∞",
    "—Å–æ–¥–∞",
    "–º–æ–ª–æ–∫–æ",
    "—Å–ª–∏–≤–∫–∏",
    "—Å–≥—É—â–µ–Ω–∫–∞",
    "–∫–µ—Ñ–∏—Ä",
    "—Å–º–µ—Ç–∞–Ω–∞",
    "—Ç–≤–æ—Ä–æ–≥",
    "—Å–ª–∏–≤ –º–∞—Å–ª–æ",
    "—Å–ª–∏–≤–º–∞—Å–ª–æ",
    "–º–∞—Å–ª–æ—Å–ª–∏–≤",
    "—Å—ã—Ä",
    "—Å—ã—Ä–∫–∏",
    "—Å—ã—Ä –ø–ª–∞–≤–ª–µ–Ω—ã–π",
    "—Å—É–ª—É–≥—É–Ω–∏",
    "–º–∞—Ü–∞—Ä–µ–ª–ª–∞",
    "–±–∞—Ç–æ–Ω",
    "–ª–∞–≤–∞—à",
    "—Ö–ª–µ–±",
    "—á–∞–π",
    "–∫–æ—Ñ–µ",
    "—à–æ–∫–æ–ª–∞–¥",
    "—Ç—É–∞–ª.–±—É–º",
    "—Ç—É–ø–æ.–±—É–º–∞–≥–∞",
    "—Ç—É–∞–ª–µ—Ç–Ω–∞—è",
    "–ø–∞–ª–æ—á–∫–∏",
    "—Å–∞–ª—Ñ–µ—Ç–∫–∏",
    "–º—ã–ª–æ",
    "—à–∞–º–ø—É–Ω—å",
    "—Å—Ç–∏—Ä–∞–ª—å–Ω—ã–π",
    "–≥—É–±–∫–∏",
    "—Ñ–æ–ª—å–≥–∞",
    "–ø–µ—Ä–≥–∞–º–µ–Ω—Ç",
    "–ø–æ–¥—Å.–º–∞—Å–ª–æ",
    "–ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ",
    "–≥–æ—Ä–æ—à–µ–∫",
    "–∫—É–∫—É—Ä—É–∑–∞",
    "—Ñ–∞—Å–æ–ª—å",
    "—Ç–æ–º–∞—Ç–Ω–∞—è –ø–∞—Å—Ç–∞",
    "—Ç–æ–º.—Å–æ—É—Å",
    "–≤–æ–¥–∞",
    "–∫–∞—Ä—Ç–æ—Ñ–∞–Ω",
    "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å",
    "–æ–≥—É—Ä–µ—Ü",
    "–æ–≥—É—Ä—Ü—ã",
    "–ø–æ–º–∏–¥–æ—Ä—ã",
    "—Ç–æ–º–∞—Ç—ã",
    "—à–∞–º–ø–∏–Ω—å–æ–Ω",
    "–ª–∏–º–æ–Ω",
    "–∫–∞–ø—É—Å—Ç–∞",
    "—Å–≤–µ–∫–ª–∞",
    "—Å–≤—ë–∫–ª–∞",
    "–º–æ—Ä–∫–æ–≤—å",
    "–º–∞–Ω–¥–∞—Ä–∏–Ω—ã",
    "–ø–µ–ª—å–º–µ–Ω–∏",
    "–º–æ—Ä–æ–∂–∫–∏",
    "–º–æ—Ä–æ–∂–µ–Ω–∫–∏"
]


def prod_kb(foods: dict):
    keyboard_main = types.InlineKeyboardMarkup(row_width=2)
    for key, value in foods.items():
        if value['click'] == 0:
            keyboard_main.add(types.InlineKeyboardButton(text=f"{key}", callback_data=prod_callback.new(prod='prod',
                                                                                                        food=f"{key[:13]}")))
        elif value['click'] == 1:
            keyboard_main.add(types.InlineKeyboardButton(text=strike(key), callback_data=prod_callback.new(prod='prod',
                                                                                                           food=f"{key[:13]}")))
        else:
            pass

    keyboard_main.add(types.InlineKeyboardButton(text="‚ûï", callback_data=prod_callback.new(prod='prod', food="add")),
                      types.InlineKeyboardButton(text="üîÑ", callback_data=prod_callback.new(prod='prod',
                                                                                            food="repeat")))

    return keyboard_main


def strike(text):
    result = ''
    for c in text:
        result = result + c + '\u0336'
    return result


# start sort prod
@dp.message_handler(commands='s')
async def get_list(message: types.Message):
    global message_decor_id
    await message.delete()
    message_decor_id = await message.answer("–û–∂–∏–¥–∞—é —Å–ø–∏—Å–æ–∫")
    await States.new.set()


# add prod
@dp.message_handler(state=States.new)
async def get_list(message: types.Message, state: FSMContext):
    global message_list_id, message_decor_id

    await dp.bot.delete_message(chat_id=message.chat.id, message_id=message_decor_id.message_id)

    sorted_list = ""
    unsorted_list = message.text.split("\n")

    await message.delete()

    for i in sort_list:
        for k in unsorted_list:
            if fuzz.partial_ratio(i.lower(), k.lower()) >= 80:
                sorted_list += k + "\n"
                unsorted_list.remove(k)

    for i in range(len(sorted_list.split("\n"))):
        if sorted_list.split("\n")[i] != '':
            temp = {sorted_list.split("\n")[i]: {'click': 0}}
            food.update(temp)

    if unsorted_list:
        message_list_id = await message.answer(text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ:\n\n" + str('\n'.join(map(str, unsorted_list))),
                                               reply_markup=prod_kb(food))
    else:
        message_list_id = await message.answer(text="–°–ø–∏—Å–æ–∫:", reply_markup=prod_kb(food))

    await state.reset_state()


prod_callback = CallbackData('mainSchedule-prefix', 'prod', 'food')


# callback_query_handler
@dp.callback_query_handler(prod_callback.filter(prod='prod'))
async def prod(call: CallbackQuery, callback_data: dict):
    global message_list_id, message_decor_id
    action = callback_data.get('food')

    if action != "add" and action != "repeat":
        for key, value in food.items():
            if action == key[:13]:
                food[key]['click'] += 1
        message_list_id = await dp.bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                                                 message_id=call.message.message_id,
                                                                 reply_markup=prod_kb(food))

    elif action == "repeat":
        for key, value in food.items():
            food[key]['click'] = 0
        message_list_id = await dp.bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                                                 message_id=call.message.message_id,
                                                                 reply_markup=prod_kb(food))

    else:
        message_decor_id = await call.message.answer("–ß—Ç–æ –¥–æ–±–∞–≤–∏–º?")
        await States.edit.set()


# –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã in list
@dp.message_handler(state=States.edit)
async def ed(message: types.Message, state: FSMContext):
    global message_list_id, message_decor_id

    await dp.bot.delete_message(chat_id=message.chat.id, message_id=message_decor_id.message_id)

    sorted_list = ""
    unsorted_list = message.text.split("\n")

    await message.delete()

    for i in sort_list:
        for k in unsorted_list:
            if fuzz.partial_ratio(i.lower(), k.lower()) >= 80:
                sorted_list += k + "\n"
                unsorted_list.remove(k)

    for i in range(len(sorted_list.split("\n"))):
        if sorted_list.split("\n")[i] != '':
            temp = {sorted_list.split("\n")[i]: {'click': 0}}
            food.update(temp)

    if unsorted_list:
        message_list_id = await dp.bot.edit_message_text(
            text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ:\n\n" + str('\n'.join(map(str, unsorted_list))),
            chat_id=message.chat.id, message_id=message_list_id.message_id,
            reply_markup=prod_kb(food))
    else:
        message_list_id = await dp.bot.edit_message_text(text="–°–ø–∏—Å–æ–∫:", chat_id=message.chat.id,
                                                         message_id=message_list_id.message_id,
                                                         reply_markup=prod_kb(food))

    await state.reset_state()
